// <auto-generated />
using System;
using CourseworkPastPaperApplication2;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CourseworkPastPaperApplication2.Server.Migrations
{
    [DbContext(typeof(PapersDbContext))]
    [Migration("20230124102025_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClassTeacher", b =>
                {
                    b.Property<Guid>("ClassesId")
                        .HasColumnType("uuid");

                    b.Property<long>("TeachersPassword")
                        .HasColumnType("bigint");

                    b.HasKey("ClassesId", "TeachersPassword");

                    b.HasIndex("TeachersPassword");

                    b.ToTable("ClassTeacher", "public");
                });

            modelBuilder.Entity("CourseworkPastPaperApplication2.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Due")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Set")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("StudentPassword")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StudentPassword");

                    b.ToTable("Assignments", "public");
                });

            modelBuilder.Entity("CourseworkPastPaperApplication2.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Classes", "public");
                });

            modelBuilder.Entity("CourseworkPastPaperApplication2.PaperResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<long?>("StudentPassword")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentPassword");

                    b.ToTable("PaperResults", "public");
                });

            modelBuilder.Entity("CourseworkPastPaperApplication2.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignmentId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("ReadData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("Questions", "public");
                });

            modelBuilder.Entity("CourseworkPastPaperApplication2.Student", b =>
                {
                    b.Property<long>("Password")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Password"));

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Password");

                    b.HasIndex("ClassId");

                    b.ToTable("Students", "public");
                });

            modelBuilder.Entity("CourseworkPastPaperApplication2.Teacher", b =>
                {
                    b.Property<long>("Password")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Password"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Password");

                    b.ToTable("Teachers", "public");
                });

            modelBuilder.Entity("ClassTeacher", b =>
                {
                    b.HasOne("CourseworkPastPaperApplication2.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseworkPastPaperApplication2.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersPassword")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseworkPastPaperApplication2.Assignment", b =>
                {
                    b.HasOne("CourseworkPastPaperApplication2.Student", null)
                        .WithMany("Assignments")
                        .HasForeignKey("StudentPassword");
                });

            modelBuilder.Entity("CourseworkPastPaperApplication2.PaperResult", b =>
                {
                    b.HasOne("CourseworkPastPaperApplication2.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseworkPastPaperApplication2.Student", null)
                        .WithMany("PaperResults")
                        .HasForeignKey("StudentPassword");

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("CourseworkPastPaperApplication2.Question", b =>
                {
                    b.HasOne("CourseworkPastPaperApplication2.Assignment", null)
                        .WithMany("Questions")
                        .HasForeignKey("AssignmentId");
                });

            modelBuilder.Entity("CourseworkPastPaperApplication2.Student", b =>
                {
                    b.HasOne("CourseworkPastPaperApplication2.Class", "CurrentClass")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentClass");
                });

            modelBuilder.Entity("CourseworkPastPaperApplication2.Assignment", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("CourseworkPastPaperApplication2.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("CourseworkPastPaperApplication2.Student", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("PaperResults");
                });
#pragma warning restore 612, 618
        }
    }
}
