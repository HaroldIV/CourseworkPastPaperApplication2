@page "/class-results/{AssignmentId:guid}"
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager
@using System.Text.Json
@using System.Text.Json.Serialization

<PageTitle>View Class Results</PageTitle>

@if (results is not null)
{
    <ResultsTableComponent Results="results" OnSaveChanges="SaveNewResults"/>
}


@code
{
    [Parameter]
    public Guid AssignmentId { get; set; }

    private ResultsTable? results { get; set; }

    protected override async Task OnInitializedAsync()
    {
        JsonSerializerOptions jsonOptions = new JsonSerializerOptions
        {
            //Converters = { new ResultsTableJsonConverter() },
            Converters = { new IgnorePropertyIfConverter<Question>(info => info.Name == "Data") },
            PropertyNameCaseInsensitive = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        };

        results = await Http.GetFromJsonAsync<NonEnumerableResultsTable>($"https://localhost:7053/Assignment/{AssignmentId}/Results");

        results = (await Http.GetStringAsync($"https://localhost:7053/Assignment/{AssignmentId}/Results") ?? string.Empty).Deserialize<NonEnumerableResultsTable>();

        if (results is null)
        {
            Console.Error.WriteLine($"Assignment with id {AssignmentId} not found");
        }

        await base.OnInitializedAsync();
    }

    private async Task SaveNewResults(IEnumerable<PaperResult> paperResults)
    {
        await Http.PostAsJsonAsync<IEnumerable<PaperResult>>($"https://localhost:7053/PaperResult/Results", paperResults);
    }
}