@page "/view-assignments/{ClassId:guid}"
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager


<PageTitle>View Assignments</PageTitle>

<button @onclick='() => NavManager.NavigateTo($"/add-assignment/{ClassId}")'>Add Assignment</button>

<hr/>

@if (assignments is not null)
{
    @foreach (var (i, assignment) in assignments.WithIndex())
    {
        @assignment.Name

        <button @onclick="() => NavigateToViewIndividualAssignment(assignment)">View Assignment Questions</button>
        <button @onclick="() => NavigateToClassResultsForAssignment(assignment)">View Class Results</button>
        <button @onclick="() => RemoveAssignment(assignment)">Remove</button>

        <br>
    }
}


@code
{
    [Parameter]
    public Guid ClassId { get; set; }

    private List<Assignment>? assignments { get; set; }

    protected override async Task OnInitializedAsync()
    {
        assignments = await Http.GetFromJsonAsync<List<Assignment>>($"https://localhost:7053/Class/{ClassId}/Assignments") ?? new List<Assignment>();

        await base.OnInitializedAsync();
    }

    private void NavigateToViewIndividualAssignment(Assignment assignment)
    {
        NavManager.NavigateTo($"/view-individual-assignment/{assignment.Id}");
    }

    private void NavigateToClassResultsForAssignment(Assignment assignment)
    {
        NavManager.NavigateTo($"/class-results/{assignment.Id}");
    }

    private async Task RemoveAssignment(Assignment assignment)
    {
        if (assignments is null)
        {
            return;
        }

        assignments.Remove(assignment);

        StateHasChanged();

        await Http.DeleteAsync($"/Assignment/{assignment.Id}");
    }
}