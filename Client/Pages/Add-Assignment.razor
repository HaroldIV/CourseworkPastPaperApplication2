@page "/add-assignment/{ClassId:guid}"
@inject HttpClient Http
@using MyProject.Components
@using OneOf
@using OneOf.Types
@inject ILocalStorageService LocalStorage

<PageTitle>Add Assignments</PageTitle>

<InputText @bind-Value="assignmentName" placeholder="Assignment Name"/>
<br/>

Due: <InputDate TValue="DateOnly" @bind-Value="due" min="@minimumDateForSetAndDue"/>
<br/>
@errorMessage
<br/>
<SearchForQuestion OnQuestionSelected="HandleQuestionSelected"/>
<br/>

@foreach (var question in questions)
{
    @Path.GetFileNameWithoutExtension(question.FileName) <button @onclick="() => { questions.Remove(question); StateHasChanged(); }">Remove Image</button>
    <br>
}

<br/>

<button @onclick="AddNewAssignment">Add new Assignment</button>


@code
{
    [Parameter]
    public Guid ClassId { get; set; }

    private readonly string minimumDateForSetAndDue = DateOnly.FromDateTime(DateTime.Now).ToString("yyyy-MM-dd");

    private HashSet<Question> questions { get; set; } = new HashSet<Question>();

    private string errorMessage = string.Empty;

    private string assignmentName { get; set; } = string.Empty;

    private DateOnly due { get; set; } = DateOnly.FromDateTime(DateTime.Now);

    private void HandleQuestionSelected(Question question)
    {
        questions.Add(question);
    }

    private async Task<OneOf<Success, Error>> AddNewAssignment()
    {
        var today = DateOnly.FromDateTime(DateTime.Now);

        if (due.CompareTo(today) == -1)
        {
            errorMessage = "Cannot be due before today";

            StateHasChanged();

            return new Error();
        }

        Assignment assignment = new Assignment
        {
            Name = assignmentName,
            Due = due,
            Set = today
        };

        questions.ForEach(assignment.Questions.Add);

        await Http.PostAsJsonAsync<Assignment>($"https://localhost:7053/Class/{ClassId}/Assignments", assignment);

        StateHasChanged();

        return new Success();
    }
}